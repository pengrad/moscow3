/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PHistory.java
 *
 * Created on 11.09.2010, 19:57:42
 */
package rzd.carFleet.hist;

import java.lang.reflect.Array;
import java.util.ArrayList;
import javax.swing.*;

import logic.BusinessManager;
import rzd.ModelTable;
import rzd.model.Model;
import rzd.model.objects.Car;
import rzd.model.objects.CarHistory;
import rzd.model.objects.Train;
import rzd.utils.Utils;

/**
 * @author ЧерныхЕА
 */
public class PCarHistory extends javax.swing.JPanel {

    /**
     * Creates new form PHistory
     */
    public PCarHistory() {
        initComponents();
        //  jTable1.getColumnModel().
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel1.setBackground(new java.awt.Color(0, 0, 204));
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("    История изменений местоположеия поезда");

        jTable1.setModel(new ModelTable());
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTable1);
        jTable1.setDefaultRenderer(Object.class, new TableCarHistRenderer());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(307, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setData(Car car) {
        ArrayList<CarHistory> carHistorys = Model.getModel().getCarHistory(car);
        if (carHistorys != null) {
            ArrayList<Object[]> listHist = new ArrayList<Object[]>();
            Object[] row;
            for (CarHistory carHistory : carHistorys) {
                // ((DefaultListModel)lCarHist.getModel()).addElement(new JLabel("*****"));
                if (carHistory.getCarLocation().getIdLocation() == BusinessManager.UNKNOWN) {
                    row = new Object[2];
                    row[0] = "<html><span  color='red'><b>" + Utils.convertDateToStr(carHistory.getDate()) + "</b></span></html>";
                    row[1] = carHistory.getCarLocation();
                    listHist.add(row);
                } else if (carHistory.getCarLocation().getIdLocation() == BusinessManager.IN_TRAIN) {
                    row = new Object[2];
                    row[0] = "<html><span  color='red'><b>"+Utils.convertDateToStr(carHistory.getDate()) + "</b></span></html>";
                    Train train = carHistory.getTrain();
                    String route = "";
                    if (train.getRoute().getSheduleForward().equals(train.getShedule())) {
                        route = train.getRoute().getNumberForward() + "  " + train.getRoute().getCityFrom() + " - " + train.getRoute().getCityTo();
                    }
                    if (train.getRoute().getSheduleBack().equals(train.getShedule())) {
                        route = train.getRoute().getNumberBack() + "  " + train.getRoute().getCityTo() + " - " + train.getRoute().getCityFrom();
                    }
                    row[1] = carHistory.getCarLocation();
                    listHist.add(row);
                    row = new Object[]{"", "Поезд -  " + route};
                    listHist.add(row);

                } else if (carHistory.getCarLocation().getIdLocation() == BusinessManager.ON_ROAD) {
                    row = new Object[2];
                    row[0] = "<html><span  color='red'><b>"+Utils.convertDateToStr(carHistory.getDate()) + "</b></span></html>";
                    row[1] = carHistory.getCarLocation();
                    listHist.add(row);
                    row = new Object[]{"", "Путь -  " + carHistory.getRoad().getName()};
                    listHist.add(row);

                } else if (carHistory.getCarLocation().getIdLocation() == BusinessManager.REPAIR) {
                    row = new Object[2];
                    row[0] = "<html><span  color='red'><b>"+Utils.convertDateToStr(carHistory.getDate()) + "</b></span></html>";
                    row[1] = carHistory.getCarLocation();
                    listHist.add(row);
                    row = new Object[]{"", "Тип ремонта -  " + carHistory.getRepair().getRepairType()};
                    listHist.add(row);
                    row = new Object[]{"", "Комментарий -  " + carHistory.getRepair().getComment()};
                    listHist.add(row);

                }
            }
            row = new Object[]{"Дата", "Местоположение"};
            listHist.add(row);
            ModelTable modelTable = (ModelTable) jTable1.getModel();
            modelTable.setDate(listHist);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
