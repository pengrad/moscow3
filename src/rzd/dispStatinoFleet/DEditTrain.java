/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DEditTrain.java
 *
 * Created on 18.09.2010, 19:16:47
 */
package rzd.dispStatinoFleet;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import rzd.utils.Utils;
import rzd.model.objects.Car;
import rzd.model.objects.Road;
import rzd.model.objects.RoadType;
import rzd.model.objects.Route;
import rzd.model.objects.Train;

/**
 *
 * @author Евгений
 */
public class DEditTrain extends javax.swing.JDialog {

    private Train train;
    private HashMap<RoadType, ArrayList<Road>> roads;
    private Road road;
    private ArrayList<Route> routes;
    private Route route;
    private ArrayList<Car> carsAll;
    private ArrayList<Car> carsInTrain;
    private Object[] ret;

    /** Creates new form DEditTrain */
    public DEditTrain(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fDateDeparture = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        fDateDestination = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        cRoad = new javax.swing.JComboBox();
        bSave = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fChief = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lCarInTrain = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lCarAll = new javax.swing.JList();
        bRight = new javax.swing.JButton();
        bLeft = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cRoute = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cRoadType = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(346, 239));

        jLabel1.setText("Дата и время отправления");

        fDateDeparture.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy H:mm"))));
        fDateDeparture.setToolTipText("Например 23.11.2010 12:45");

        jLabel2.setText("Дата и время отправления");

        fDateDestination.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy H:mm"))));
        fDateDestination.setToolTipText("Например 23.11.2010 12:45");

        jLabel3.setText("Путь отроавления/прибытия");

        cRoad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        bSave.setText("Сохранить");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bCancel.setText("Отмена");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        jLabel4.setText("Начальник поезда");

        jScrollPane1.setViewportView(lCarInTrain);

        jScrollPane2.setViewportView(lCarAll);

        bRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rzd/resurce/left.png"))); // NOI18N
        bRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRightActionPerformed(evt);
            }
        });

        bLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rzd/resurce/right.png"))); // NOI18N
        bLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLeftActionPerformed(evt);
            }
        });

        jLabel5.setText("Вагоны в составе");

        jLabel6.setText("Все вагоны");

        cRoute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cRoute.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cRouteItemStateChanged(evt);
            }
        });

        jLabel7.setText("Маршрут");

        cRoadType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cRoadType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cRoadTypeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bSave)
                        .addGap(18, 18, 18)
                        .addComponent(bCancel))
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(jLabel4)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fDateDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fDateDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cRoute, 0, 228, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fChief, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cRoad, 0, 228, Short.MAX_VALUE)
                    .addComponent(cRoadType, 0, 228, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bLeft, 0, 0, Short.MAX_VALUE)
                            .addComponent(bRight, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel7)
                        .addGap(13, 13, 13)
                        .addComponent(cRoute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fDateDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(fDateDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fChief, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(14, 14, 14)
                        .addComponent(cRoadType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cRoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bSave)
                            .addComponent(bCancel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(bRight, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(249, 249, 249))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE))))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cRouteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cRouteItemStateChanged
        // TODO add your handling code here:
}//GEN-LAST:event_cRouteItemStateChanged

    private void bRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRightActionPerformed
        Object[] selected = lCarInTrain.getSelectedValues();
        if (selected != null) {
            for (int i = 0; i < selected.length; i++) {
                ((DefaultListModel) lCarAll.getModel()).addElement(selected[i]);
                ((DefaultListModel) lCarInTrain.getModel()).removeElement(selected[i]);
            }
        }
    }//GEN-LAST:event_bRightActionPerformed

    private void bLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLeftActionPerformed
        Object[] selected = lCarAll.getSelectedValues();
        if (selected != null) {
            for (int i = 0; i < selected.length; i++) {
                ((DefaultListModel) lCarInTrain.getModel()).addElement(selected[i]);
                ((DefaultListModel) lCarAll.getModel()).removeElement(selected[i]);
            }
        }
    }//GEN-LAST:event_bLeftActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        if (isCorrectInput()) {
            if (train == null) {
                train = new Train(0, Utils.convertStrToDateTime(fDateDeparture.getText()), Utils.convertStrToDateTime(fDateDestination.getText()), fChief.getText());
            } else {
                train.setDtDeparture(Utils.convertStrToDateTime(fDateDeparture.getText()));
                train.setDtDestination(Utils.convertStrToDateTime(fDateDestination.getText()));
                train.setChief(fChief.getText());
            }
            route = (Route) cRoute.getSelectedItem();
            road = (Road) cRoad.getSelectedItem();

            if (((DefaultListModel) lCarInTrain.getModel()).size() > 0) {
                carsInTrain = new ArrayList<Car>(((DefaultListModel) lCarInTrain.getModel()).size());
                Object[] c = ((DefaultListModel) lCarInTrain.getModel()).toArray();
                for (int i = 0; i < c.length; i++) {
                    carsInTrain.add((Car) c[i]);
                }
            } else {
                carsInTrain = null;
            }
            ret = new Object[]{train, route, road, carsInTrain};
        } else {
            JOptionPane.showMessageDialog(null, "Не все поля заполнены");
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        ret = null;
        setVisible(false);
    }//GEN-LAST:event_bCancelActionPerformed

    private void cRoadTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cRoadTypeItemStateChanged
        RoadType rt = (RoadType) cRoadType.getSelectedItem();
        ArrayList<Road> rr = roads.get(rt);
        cRoad.removeAll();
        if (rr != null && rr.size() != 0) {
            for (Road r : rr) {
                cRoad.addItem(r);
            }
        }
    }//GEN-LAST:event_cRoadTypeItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                DEditTrain dialog = new DEditTrain(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    //Возаращеет Train,Route,Road,cars
    public Object[] open(Train train, HashMap<RoadType, ArrayList<Road>> roads, Road road, ArrayList<Route> routes, Route route, ArrayList<Car> carsInTrain, ArrayList<Car> carsAll) {
        this.ret = null;
        this.train = train;
        this.roads = roads;
        this.road = road;
        this.routes = routes;
        this.route = route;
        this.carsAll = carsAll;
        this.carsInTrain = carsInTrain;

        cRoadType.removeAll();
        cRoad.removeAll();
        if (roads != null && roads.size() != 0) {
            RoadType rtTmp = null;
            Set<RoadType> key = roads.keySet();
            Iterator<RoadType> itRT = key.iterator();
            while (itRT.hasNext()) {
                RoadType rt = itRT.next();
                cRoadType.addItem(rt);
                ArrayList<Road> lr = roads.get(rt);
                if (lr != null && road != null) {
                    if (lr.contains(lr)) {
                        rtTmp = rt;
                    }
                }
            }
            if (rtTmp != null) {
                cRoadType.setSelectedItem(rtTmp);
                ArrayList<Road> rr = roads.get(rtTmp);
                for (Road r : rr) {
                    cRoad.addItem(r);
                }
                cRoad.setSelectedItem(road);
            } else {
                ArrayList<Road> rr = roads.get(roads.keySet().toArray()[0]);
                if (rr != null) {
                    for (Road r : rr) {
                        cRoad.addItem(r);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Справочник путей пуст");
            return null;
        }

        cRoute.removeAll();
        if (routes != null && routes.size() != 0) {
            for (Route r : routes) {
                cRoute.addItem(r);
            }
            if (route != null) {
                cRoute.setSelectedItem(route);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Справочник маршрутов пуст");
            return null;
        }
        lCarAll.removeAll();
        if (carsAll != null && carsAll.size() != 0) {
            for (Car c : carsAll) {
                ((DefaultListModel) lCarAll.getModel()).addElement(c);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Справочник вагонов пуст");
            return null;
        }
        if (train != null) {
            fChief.setText(train.getChief());
            fDateDeparture.setText(Utils.convertDateTimeToStr(train.getDtDeparture()));
            fDateDeparture.setText(Utils.convertDateTimeToStr(train.getDtDeparture()));
            if (carsInTrain != null) {
                for (Car c : carsInTrain) {
                    ((DefaultListModel) lCarInTrain.getModel()).addElement(c);
                    ((DefaultListModel) lCarAll.getModel()).removeElement(c);
                }
            }
        } else {
            fChief.setText("");
            fDateDeparture.setText("");
            fDateDeparture.setText("");
        }
        setVisible(true);
        return ret;
    }

    private boolean isCorrectInput() {
        if (!fChief.getText().trim().equals("") &&
                !fDateDeparture.getText().trim().equals("") &&
                !fDateDestination.getText().trim().equals("") && cRoad.getSelectedItem() != null && cRoute.getSelectedItem() != null) {
            return true;
        } else {
            return false;
        }
    }
//    private ArrayList<Road> updateListRoad(RoadType rt){
//    H
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bLeft;
    private javax.swing.JButton bRight;
    private javax.swing.JButton bSave;
    private javax.swing.JComboBox cRoad;
    private javax.swing.JComboBox cRoadType;
    private javax.swing.JComboBox cRoute;
    private javax.swing.JTextField fChief;
    private javax.swing.JFormattedTextField fDateDeparture;
    private javax.swing.JFormattedTextField fDateDestination;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lCarAll;
    private javax.swing.JList lCarInTrain;
    // End of variables declaration//GEN-END:variables
}
